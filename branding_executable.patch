diff --git a/build/win/reorder-imports.py b/build/win/reorder-imports.py
index 88851609d4..9579dcb9d3 100755
--- a/build/win/reorder-imports.py
+++ b/build/win/reorder-imports.py
@@ -24,8 +24,8 @@ def reorder_imports(input_dir, output_dir, architecture):
   # correct executable in the first place, so that this script
   # only needs to verify that and not write a whole new exe.
 
-  input_image = os.path.join(input_dir, 'chrome.exe')
-  output_image = os.path.join(output_dir, 'chrome.exe')
+  input_image = os.path.join(input_dir, 'NinjaBrowser.exe')
+  output_image = os.path.join(output_dir, 'NinjaBrowser.exe')
 
   # pefile mmap()s the whole executable, and then parses parts of
   # it into python data structures for ease of processing.
@@ -73,7 +73,7 @@ def reorder_imports(input_dir, output_dir, architecture):
 
   pe.write(filename=output_image)
 
-  for fname in glob.iglob(os.path.join(input_dir, 'chrome.exe.*')):
+  for fname in glob.iglob(os.path.join(input_dir, 'NinjaBrowser.exe.*')):
     shutil.copy(fname, os.path.join(output_dir, os.path.basename(fname)))
   return 0
 
diff --git a/chrome/BUILD.gn b/chrome/BUILD.gn
index d1388e8d18..8330db0e3f 100644
--- a/chrome/BUILD.gn
+++ b/chrome/BUILD.gn
@@ -71,6 +71,29 @@ if (is_win && enable_resource_allowlist_generation) {
   _chrome_resource_allowlist = "$target_gen_dir/chrome_resource_allowlist.txt"
 }
 
+if (is_win) {
+  action("reorder_imports") {
+    script = "//build/win/reorder-imports.py"
+
+    # See comment in chrome_dll.gypi in the hardlink_to_output
+    # target for why this cannot be 'initial' like the DLL.
+    inputs = [ "$root_out_dir/initialexe/NinjaBrowser.exe" ]
+    outputs = [
+      "$root_out_dir/NinjaBrowser.exe",
+      "$root_out_dir/NinjaBrowser.exe.pdb",
+    ]
+    args = [
+      "-i",
+      rebase_path("$root_out_dir/initialexe", root_build_dir),
+      "-o",
+      rebase_path("$root_out_dir", root_build_dir),
+      "-a",
+      current_cpu,
+    ]
+    deps = [ ":chrome_initial" ]
+  }
+}
+
 # This does not currently work. See crbug.com/1311822.
 # This target exists above chrome and it's main components in the dependency
 # tree as a central place to put assert_no_deps annotations. Since this depends
@@ -108,6 +131,10 @@ if (!is_android && !is_mac) {
     # Windows-only deps are OK because chrome_initial uses initialexe/chrome as
     # the output name for that platform.
     # See crbug.com/1146571.
+    if (is_win) {
+      public_deps += [ ":reorder_imports" ]
+      data_deps += [ ":reorder_imports" ]
+    }
   }
 
   template("_chrome_exe") {
@@ -119,7 +146,11 @@ if (!is_android && !is_mac) {
     target(_type, target_name) {
       configs -= [ "//build/config/compiler:thinlto_optimize_default" ]
       configs += [ "//build/config/compiler:thinlto_optimize_max" ]
-      output_name = "chrome"
+      if (is_win) {
+        output_name = "initialexe/NinjaBrowser"
+      } else {
+        output_name = "chrome"
+      }
 
       # Because the sources list varies so significantly per-platform, generally
       # each platform lists its own files rather than relying on filtering or
diff --git a/chrome/install_static/chromium_install_modes.cc b/chrome/install_static/chromium_install_modes.cc
index 3b547d0236..387127c855 100644
--- a/chrome/install_static/chromium_install_modes.cc
+++ b/chrome/install_static/chromium_install_modes.cc
@@ -14,9 +14,9 @@
 
 namespace install_static {
 
-const wchar_t kCompanyPathName[] = L"";
+const wchar_t kCompanyPathName[] = L"NinjaBrowser";
 
-const wchar_t kProductPathName[] = L"Chromium";
+const wchar_t kProductPathName[] = L"NinjaBrowser";
 
 const size_t kProductPathNameLength = _countof(kProductPathName) - 1;
 
diff --git a/chrome/installer/mini_installer/BUILD.gn b/chrome/installer/mini_installer/BUILD.gn
index 3cd3b80bc8..08dcd2c681 100644
--- a/chrome/installer/mini_installer/BUILD.gn
+++ b/chrome/installer/mini_installer/BUILD.gn
@@ -144,7 +144,7 @@ action("mini_installer_archive") {
 
   inputs = [
     "$root_out_dir/chrome.dll",
-    "$root_out_dir/chrome.exe",
+    "$root_out_dir/NinjaBrowser.exe",
     "$root_out_dir/locales/en-US.pak",
     "$root_out_dir/setup.exe",
     "//chrome/tools/build/win/makecab.py",
diff --git a/chrome/installer/mini_installer/chrome.release b/chrome/installer/mini_installer/chrome.release
index 28eb7e786f..5f79cd18e2 100644
--- a/chrome/installer/mini_installer/chrome.release
+++ b/chrome/installer/mini_installer/chrome.release
@@ -6,7 +6,7 @@
 #
 # Chrome Application dir entries, sorted alphabetically.
 #
-chrome.exe: %(ChromeDir)s\
+NinjaBrowser.exe: %(ChromeDir)s\
 chrome_proxy.exe: %(ChromeDir)s\
 #
 # Chrome version dir assembly manifest.
diff --git a/chrome/installer/util/util_constants.cc b/chrome/installer/util/util_constants.cc
index 2334bbbe94..5c5fa10fdc 100644
--- a/chrome/installer/util/util_constants.cc
+++ b/chrome/installer/util/util_constants.cc
@@ -216,7 +216,7 @@ const char kGoogleUpdateIsMachineEnvVar[] = "GoogleUpdateIsMachine";
 // Active Setup.
 const wchar_t kActiveSetupExe[] = L"chrmstp.exe";
 const wchar_t kChromeDll[] = L"chrome.dll";
-const wchar_t kChromeExe[] = L"chrome.exe";
+const wchar_t kChromeExe[] = L"NinjaBrowser.exe";
 const wchar_t kChromeNewExe[] = L"new_chrome.exe";
 const wchar_t kChromeOldExe[] = L"old_chrome.exe";
 const wchar_t kChromeProxyExe[] = L"chrome_proxy.exe";
